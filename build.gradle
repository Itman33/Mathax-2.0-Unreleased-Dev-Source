plugins {
    id "fabric-loom" version "1.0-SNAPSHOT"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.client_version
group = project.maven_group

repositories {
    maven {
        name = "jitpack"
        url "https://jitpack.io"
    }

    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }

    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }

    maven {
        name = "vram"
        url "https://maven.vram.io"
    }

    mavenCentral()
}

configurations {
    // include mods
    modImplementation.extendsFrom(modInclude)
    include.extendsFrom(modInclude)

    // include libraries
    implementation.extendsFrom(library)
    shadow.extendsFrom(library)
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modInclude fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version)

    // Compat fixes
    modCompileOnly fabricApi.module("fabric-renderer-indigo", project.fabric_api_version)
    modCompileOnly("me.jellysquid.mods:sodium-fabric:${project.sodium_version}") {
        transitive = false
    }
    modCompileOnly("io.vram:canvas-fabric-mc119:1.0.+") {
        transitive = false
    }

    // Proxies
    library("io.netty:netty-handler-proxy:${project.netty_version}") {
        transitive = false
    }
    library("io.netty:netty-codec-socks:${project.netty_version}") {
        transitive = false
    }

    // Init
    library "org.reflections:reflections:${project.reflections_version}"

    // JSON
    library "org.json:json:${project.json_version}"

    // Baritone integration
    modInclude "baritone:fabric:${project.baritone_version}"

    // Discord RPC
    library "club.minnced:java-discord-rpc:${project.discord_rpc_version}"

    shadow project(":launch")
}

loom {
    accessWidenerPath = file("src/main/resources/mathax.accesswidener")
}

afterEvaluate {
    migrateMappings.configure {
        outputDir = project.file("src/main/java")
    }
}

shadowJar {
    configurations = [
        project.configurations.shadow
    ]
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version

        filter {
            line -> line.replace("@mc_version@", project.minecraft_version)
        }
    }
}

jar {
    from "LICENSE"

    manifest {
        attributes("Main-Class": project.maven_group + ".Main")
    }
}

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}